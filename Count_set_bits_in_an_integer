Count Set bits in an integer.


Write an efficient program to count number of 1 s in the binary representation of a given integer.
Input n=6
output=2
Binary representation of 6 is 110 , so has 2 set bits

input n=13
output=3
Binary representation of 13 is 1101 , so has 3 set bits


1)Simple approach
Iterate for all bits in the given integer and keep the count of set bits . Return the counter
int count_setbits(int N)
{ 
   int cnt=0;

   while(N>0)
   {
       cnt+=(N&1);
       N=N>>1;
   }

   return cnt;
}

TC O(log n)
SC=O(1)




What if we could have solved this using a single line of code?

Yes, it's possible using the function __builtin_popcount() in STL.

The function takes an unsigned integer as input parameter and returns the number of set bits present in that integer.

Syntax:

__builtin_popcount(int num);
Note: This function only works for unsigned or positive integers.




Code:

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main() {
    
    int n = 7;
    
    cout<<__builtin_popcount(n);
    
    return 0;
}
Output:

3
What if the integer is of the type "long long" and not fits in the range of int?

In that case, there is a separate function with slight variation in function name but serves exactly the same purpose. The function is __builtin_popcountll(). Notice the ll in the end of function name.

Below is the implementation of the above function:

Code:

#include<iostream>
#include<vector>
#include<algorithm>

using namespace std;

int main() {
    
    long long n = 77777777777777;
    
    cout<<__builtin_popcountll(n);
    
    return 0;
}
Output:

23
